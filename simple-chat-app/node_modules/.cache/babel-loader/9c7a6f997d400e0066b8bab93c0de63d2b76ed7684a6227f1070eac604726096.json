{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\noahb\\\\Coding\\\\FHIR\\\\simple-chat-app\\\\src\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Chat.css'; // Optional: for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState(['Please enter your patient ID as the first message.']);\n  const [inputValue, setInputValue] = useState('');\n  const [patientId, setPatientId] = useState('');\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleSendMessage = async () => {\n    if (inputValue.trim()) {\n      const userMessage = inputValue;\n      setMessages([...messages, userMessage]);\n      setInputValue(''); // Clear the input field\n\n      // Check if the first message is the patient-id\n      if (messages.length === 1) {\n        // First user message\n        setPatientId(userMessage); // Store the patient-id\n\n        // Check if the patient exists\n        try {\n          const response = await fetch(`http://localhost:3000/fhir/Patient/${userMessage}`);\n          if (!response.ok) {\n            setMessages(prevMessages => [...prevMessages, `Patient with ID ${userMessage} does not exist. Please try again.`]);\n            return; // Exit the function\n          }\n          const autoResponse = `Hello, ${userMessage}, how may I assist you.`;\n          setMessages(prevMessages => [...prevMessages, autoResponse]);\n        } catch (error) {\n          console.error('Error checking patient existence:', error);\n          setMessages(prevMessages => [...prevMessages, 'An error occurred while checking the patient ID. Please try again.']);\n        }\n      } else {\n        // Only send messages to the AI if a valid patient ID has been set\n        if (patientId) {\n          // Existing code for sending messages to the AI\n          try {\n            const response = await fetch('http://localhost:1234/v1/chat/completions', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                model: \"internlm2_5-20b-chat\",\n                messages: [{\n                  role: \"system\",\n                  content: `You are a pharmacist...`\n                }, {\n                  role: \"user\",\n                  content: userMessage\n                }],\n                temperature: 0,\n                max_tokens: -1,\n                stream: false\n              })\n            });\n            const data = await response.json();\n            if (data && data.choices && data.choices.length > 0) {\n              const aiMessage = data.choices[0].message.content;\n              setMessages(prevMessages => [...prevMessages, aiMessage]);\n            }\n          } catch (error) {\n            console.error('Error sending message:', error);\n          }\n        } else {\n          // If no valid patient ID, inform the user\n          setMessages(prevMessages => [...prevMessages, 'Please enter a valid patient ID before sending messages.']);\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        placeholder: \"Type your message here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"zxXOsuS8VXXrnOSw/jHYkiXn7nI=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","inputValue","setInputValue","patientId","setPatientId","handleInputChange","event","target","value","handleSendMessage","trim","userMessage","length","response","fetch","ok","prevMessages","autoResponse","error","console","method","headers","body","JSON","stringify","model","role","content","temperature","max_tokens","stream","data","json","choices","aiMessage","message","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/noahb/Coding/FHIR/simple-chat-app/src/Chat.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Chat.css'; // Optional: for styling\r\n\r\nconst Chat = () => {\r\n    const [messages, setMessages] = useState(['Please enter your patient ID as the first message.']);\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [patientId, setPatientId] = useState('');\r\n\r\n    const handleInputChange = (event) => {\r\n        setInputValue(event.target.value);\r\n    };\r\n    \r\n    const handleSendMessage = async () => {\r\n        if (inputValue.trim()) {\r\n            const userMessage = inputValue;\r\n            setMessages([...messages, userMessage]);\r\n            setInputValue(''); // Clear the input field\r\n    \r\n            // Check if the first message is the patient-id\r\n            if (messages.length === 1) { // First user message\r\n                setPatientId(userMessage); // Store the patient-id\r\n                \r\n                // Check if the patient exists\r\n                try {\r\n                    const response = await fetch(`http://localhost:3000/fhir/Patient/${userMessage}`);\r\n                    if (!response.ok) {\r\n                        setMessages((prevMessages) => [...prevMessages, `Patient with ID ${userMessage} does not exist. Please try again.`]);\r\n                        return; // Exit the function\r\n                    }\r\n                    \r\n                    const autoResponse = `Hello, ${userMessage}, how may I assist you.`;\r\n                    setMessages((prevMessages) => [...prevMessages, autoResponse]);\r\n                } catch (error) {\r\n                    console.error('Error checking patient existence:', error);\r\n                    setMessages((prevMessages) => [...prevMessages, 'An error occurred while checking the patient ID. Please try again.']);\r\n                }\r\n            } else {\r\n                // Only send messages to the AI if a valid patient ID has been set\r\n                if (patientId) {\r\n                    // Existing code for sending messages to the AI\r\n                    try {\r\n                        const response = await fetch('http://localhost:1234/v1/chat/completions', {\r\n                            method: 'POST',\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                            },\r\n                            body: JSON.stringify({\r\n                                model: \"internlm2_5-20b-chat\",\r\n                                messages: [\r\n                                    { role: \"system\", content: `You are a pharmacist...` },\r\n                                    { role: \"user\", content: userMessage }\r\n                                ],\r\n                                temperature: 0,\r\n                                max_tokens: -1,\r\n                                stream: false\r\n                            }),\r\n                        });\r\n    \r\n                        const data = await response.json();\r\n                        if (data && data.choices && data.choices.length > 0) {\r\n                            const aiMessage = data.choices[0].message.content;\r\n                            setMessages((prevMessages) => [...prevMessages, aiMessage]);\r\n                        }\r\n                    } catch (error) {\r\n                        console.error('Error sending message:', error);\r\n                    }\r\n                } else {\r\n                    // If no valid patient ID, inform the user\r\n                    setMessages((prevMessages) => [...prevMessages, 'Please enter a valid patient ID before sending messages.']);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"messages\">\r\n                {messages.map((message, index) => (\r\n                    <div key={index} className=\"message\">\r\n                        {message}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInputChange}\r\n                    placeholder=\"Type your message here...\"\r\n                />\r\n                <button onClick={handleSendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}