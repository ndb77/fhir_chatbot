{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\noahb\\\\Coding\\\\FHIR\\\\simple-chat-app\\\\src\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Chat.css'; // Optional: for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleSendMessage = async () => {\n    if (inputValue.trim()) {\n      const userMessage = inputValue;\n      setMessages([...messages, userMessage]);\n      setInputValue(''); // Clear the input field\n\n      // Send the user's message to the API\n      try {\n        // TODO: change to the actual API endpoint\n        const response = await fetch('http://localhost:1234/v1/chat/completions', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            model: \"llama-3.2-3b-instruct\",\n            //TODO: change to actual instructions\n            messages: [{\n              role: \"system\",\n              content: \"You are an artificial intelligence large language model. Your task is to do the following: 1. Identify which medication is being referenced if at all. 2. Identify what the patient is asking about the medication. 2a. If the patient is asking about a medication side effect, respond with creating an appropriate API call using the format: !!API CALL: https://api.fda.gov/drug/label.json?search=adverse_reactions:[medication_name] 2b. If the patient is asking about dosage and administration instructions, respond with creating an appropriate API call using the format: !!FHIR CALL: http://localhost:3000/fhir/MedicationRequest?patient=helen-miller 2c. If the patient asks about why they are taking the medication, respond with creating an appropriate API call using the format: !!FHIR CALL: http://localhost:3000/fhir/Condition?patient=helen-miller \"\n            }, {\n              role: \"user\",\n              content: userMessage\n            }],\n            temperature: 0.7,\n            max_tokens: -1,\n            stream: false\n          })\n        });\n        const data = await response.json();\n        // Assuming the response contains a message from the AI\n        if (data && data.choices && data.choices.length > 0) {\n          const aiMessage = data.choices[0].message.content;\n          setMessages(prevMessages => [...prevMessages, aiMessage]);\n\n          // Parse for API calls\n          const apiCalls = parseApiCalls(aiMessage);\n          if (apiCalls.length > 0) {\n            setMessages(prevMessages => [...prevMessages, ...apiCalls]);\n          }\n\n          // Send another message to the AI with an empty messages section\n          await fetch('http://localhost:1234/v1/chat/completions', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              model: \"llama-3.2-3b-instruct\",\n              messages: [],\n              // Leave this section blank\n              temperature: 0.7,\n              max_tokens: -1,\n              stream: false\n            })\n          });\n        }\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    }\n  };\n  const parseApiCalls = message => {\n    const apiCalls = [];\n    const regex = /!!(API CALL|FHIR CALL):\\s*(.+)/g;\n    let match;\n    while ((match = regex.exec(message)) !== null) {\n      apiCalls.push(match[2]); // Capture the message after the call type\n    }\n    return apiCalls;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        placeholder: \"Type your message here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"slbeoFq67b53BRRhfk6DiRI5k0A=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","inputValue","setInputValue","handleInputChange","event","target","value","handleSendMessage","trim","userMessage","response","fetch","method","headers","body","JSON","stringify","model","role","content","temperature","max_tokens","stream","data","json","choices","length","aiMessage","message","prevMessages","apiCalls","parseApiCalls","error","console","regex","match","exec","push","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/noahb/Coding/FHIR/simple-chat-app/src/Chat.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Chat.css'; // Optional: for styling\r\n\r\nconst Chat = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (event) => {\r\n        setInputValue(event.target.value);\r\n    };\r\n\r\n    const handleSendMessage = async () => {\r\n        if (inputValue.trim()) {\r\n            const userMessage = inputValue;\r\n            setMessages([...messages, userMessage]);\r\n            setInputValue(''); // Clear the input field\r\n\r\n            // Send the user's message to the API\r\n            try {\r\n                // TODO: change to the actual API endpoint\r\n                const response = await fetch('http://localhost:1234/v1/chat/completions', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        model: \"llama-3.2-3b-instruct\",\r\n                        //TODO: change to actual instructions\r\n                        messages: [\r\n                            { role: \"system\", content: \"You are an artificial intelligence large language model. Your task is to do the following: 1. Identify which medication is being referenced if at all. 2. Identify what the patient is asking about the medication. 2a. If the patient is asking about a medication side effect, respond with creating an appropriate API call using the format: !!API CALL: https://api.fda.gov/drug/label.json?search=adverse_reactions:[medication_name] 2b. If the patient is asking about dosage and administration instructions, respond with creating an appropriate API call using the format: !!FHIR CALL: http://localhost:3000/fhir/MedicationRequest?patient=helen-miller 2c. If the patient asks about why they are taking the medication, respond with creating an appropriate API call using the format: !!FHIR CALL: http://localhost:3000/fhir/Condition?patient=helen-miller \" },\r\n                            { role: \"user\", content: userMessage }\r\n                        ],\r\n                        temperature: 0.7,\r\n                        max_tokens: -1,\r\n                        stream: false\r\n                    }),\r\n                });\r\n\r\n                const data = await response.json();\r\n                // Assuming the response contains a message from the AI\r\n                if (data && data.choices && data.choices.length > 0) {\r\n                    const aiMessage = data.choices[0].message.content;\r\n                    setMessages((prevMessages) => [...prevMessages, aiMessage]);\r\n\r\n                    // Parse for API calls\r\n                    const apiCalls = parseApiCalls(aiMessage);\r\n                    if (apiCalls.length > 0) {\r\n                        setMessages((prevMessages) => [...prevMessages, ...apiCalls]);\r\n                    }\r\n\r\n                    // Send another message to the AI with an empty messages section\r\n                    await fetch('http://localhost:1234/v1/chat/completions', {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                        },\r\n                        body: JSON.stringify({\r\n                            model: \"llama-3.2-3b-instruct\",\r\n                            messages: [], // Leave this section blank\r\n                            temperature: 0.7,\r\n                            max_tokens: -1,\r\n                            stream: false\r\n                        }),\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                console.error('Error sending message:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const parseApiCalls = (message) => {\r\n        const apiCalls = [];\r\n        const regex = /!!(API CALL|FHIR CALL):\\s*(.+)/g;\r\n        let match;\r\n\r\n        while ((match = regex.exec(message)) !== null) {\r\n            apiCalls.push(match[2]); // Capture the message after the call type\r\n        }\r\n\r\n        return apiCalls;\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"messages\">\r\n                {messages.map((message, index) => (\r\n                    <div key={index} className=\"message\">\r\n                        {message}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInputChange}\r\n                    placeholder=\"Type your message here...\"\r\n                />\r\n                <button onClick={handleSendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}