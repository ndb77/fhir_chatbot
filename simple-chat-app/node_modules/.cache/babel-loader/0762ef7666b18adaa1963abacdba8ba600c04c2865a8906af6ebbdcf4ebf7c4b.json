{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\noahb\\\\Coding\\\\FHIR\\\\simple-chat-app\\\\src\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Chat.css'; // Optional: for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleSendMessage = async () => {\n    if (inputValue.trim()) {\n      const userMessage = inputValue;\n      setMessages([...messages, userMessage]);\n      setInputValue(''); // Clear the input field\n\n      // Send the user's message to the API\n      try {\n        // TODO: change to the actual API endpoint\n        const response = await fetch('http://localhost:1234/v1/chat/completions', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            model: \"llama-3.2-3b-instruct\",\n            //TODO: change to actual instructions\n            messages: [{\n              role: \"system\",\n              content: \"Your responsibility it is to create a FHIR call or API that always addresses the user's question using the following the instructions: 1. Provide the correct FHIR or API call as listed in the following instructions. Do not respond with anything else 2. Identify what the patient is asking about the medication. 2a. If the patient is asking about a medication side effect, respond by creating an appropriate API call using the format: !!API CALL: https://api.fda.gov/drug/label.json?search=openfda.brand_name:[medication_name] 2b. If the patient is asking about dosage, scheduling, and or administration instructions about a medication, respond by creating an appropriate API call using the format: !!FHIR CALL: http://localhost:3000/fhir/MedicationRequest?patient=[patient-id] 2c. If the patient asks about why they are taking the medication, respond with creating an appropriate API call using the format: !!FHIR CALL: http://localhost:3000/fhir/Condition?patient=[patient-id] 3. If the patient asks about topics that fulfill more than one criteria, respond with all of the appropriate API calls.\"\n            }, {\n              role: \"user\",\n              content: userMessage\n            }],\n            temperature: 0.5,\n            max_tokens: -1,\n            stream: false\n          })\n        });\n        const data = await response.json();\n        // Assuming the response contains a message from the AI\n        if (data && data.choices && data.choices.length > 0) {\n          const aiMessage = data.choices[0].message.content;\n          setMessages(prevMessages => [...prevMessages, aiMessage]);\n        }\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        placeholder: \"Type your message here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"slbeoFq67b53BRRhfk6DiRI5k0A=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","inputValue","setInputValue","handleInputChange","event","target","value","handleSendMessage","trim","userMessage","response","fetch","method","headers","body","JSON","stringify","model","role","content","temperature","max_tokens","stream","data","json","choices","length","aiMessage","message","prevMessages","error","console","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/noahb/Coding/FHIR/simple-chat-app/src/Chat.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Chat.css'; // Optional: for styling\r\n\r\nconst Chat = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (event) => {\r\n        setInputValue(event.target.value);\r\n    };\r\n\r\n    const handleSendMessage = async () => {\r\n        if (inputValue.trim()) {\r\n            const userMessage = inputValue;\r\n            setMessages([...messages, userMessage]);\r\n            setInputValue(''); // Clear the input field\r\n\r\n            // Send the user's message to the API\r\n            try {\r\n                // TODO: change to the actual API endpoint\r\n                const response = await fetch('http://localhost:1234/v1/chat/completions', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        model: \"llama-3.2-3b-instruct\",\r\n                        //TODO: change to actual instructions\r\n                        messages: [\r\n                            { role: \"system\", content: \"Your responsibility it is to create a FHIR call or API that always addresses the user's question using the following the instructions: 1. Provide the correct FHIR or API call as listed in the following instructions. Do not respond with anything else 2. Identify what the patient is asking about the medication. 2a. If the patient is asking about a medication side effect, respond by creating an appropriate API call using the format: !!API CALL: https://api.fda.gov/drug/label.json?search=openfda.brand_name:[medication_name] 2b. If the patient is asking about dosage, scheduling, and or administration instructions about a medication, respond by creating an appropriate API call using the format: !!FHIR CALL: http://localhost:3000/fhir/MedicationRequest?patient=[patient-id] 2c. If the patient asks about why they are taking the medication, respond with creating an appropriate API call using the format: !!FHIR CALL: http://localhost:3000/fhir/Condition?patient=[patient-id] 3. If the patient asks about topics that fulfill more than one criteria, respond with all of the appropriate API calls.\"},\r\n                            { role: \"user\", content: userMessage }\r\n                        ],\r\n                        temperature: 0.5,\r\n                        max_tokens: -1,\r\n                        stream: false\r\n                    }),\r\n                });\r\n\r\n                const data = await response.json();\r\n                // Assuming the response contains a message from the AI\r\n                if (data && data.choices && data.choices.length > 0) {\r\n                    const aiMessage = data.choices[0].message.content;\r\n                    setMessages((prevMessages) => [...prevMessages, aiMessage]);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error sending message:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"messages\">\r\n                {messages.map((message, index) => (\r\n                    <div key={index} className=\"message\">\r\n                        {message}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInputChange}\r\n                    placeholder=\"Type your message here...\"\r\n                />\r\n                <button onClick={handleSendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}