{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\noahb\\\\Coding\\\\FHIR\\\\simple-chat-app\\\\src\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Chat.css'; // Optional: for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [patientId, setPatientId] = useState('');\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handlePatientIdChange = event => {\n    setPatientId(event.target.value);\n  };\n  const handleSendMessage = async () => {\n    if (inputValue.trim()) {\n      const userMessage = inputValue;\n      setMessages([...messages, userMessage]);\n      setInputValue(''); // Clear the input field\n\n      // Send the user's message to the API\n      try {\n        // TODO: change to the actual API endpoint\n        const response = await fetch('http://localhost:1234/v1/chat/completions', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            model: \"llama-3.2-3b-instruct\",\n            //TODO: change to actual instructions\n            messages: [{\n              role: \"system\",\n              content: \"You are a large language model that is able to respond to the user's question. Your user's patient-id is {patient-id}.Your task is to do the following: 1. Provide the correct FHIR or API call as listed in the following instructions 2a. If the user is asking about a medication side effect, respond by creating an appropriate API call using the format: '!!API CALL: https://api.fda.gov/drug/label.json?search=openfda.brand_name:[medication_name]' 2b. If the user is asking about dosage, scheduling, and or administration instructions about a medication, respond by creating an appropriate API call using the format: '!!FHIR CALL: http://localhost:3000/fhir/MedicationRequest?patient=[patient-id]' 2c. If the user asks about why they are taking the medication, respond with creating an appropriate API call using the format: '!!FHIR CALL: http://localhost:3000/fhir/Condition?patient=[patient-id]' 3. If the user asks about topics that fulfill more than one criteria, respond by creating all of the appropriate API calls. 4. Do not respond with anything else aside from the API or FHIR call.\"\n            }, {\n              role: \"user\",\n              content: userMessage\n            }],\n            temperature: 0.5,\n            max_tokens: -1,\n            stream: false\n          })\n        });\n        const data = await response.json();\n        // Assuming the response contains a message from the AI\n        if (data && data.choices && data.choices.length > 0) {\n          const aiMessage = data.choices[0].message.content;\n          setMessages(prevMessages => [...prevMessages, aiMessage]);\n        }\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"patient-id-prompt\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: patientId,\n        onChange: handlePatientIdChange,\n        placeholder: \"Enter patient ID...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        placeholder: \"Type your message here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"4gZ193aGC7YVRczoY4Km1g2CTFA=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","inputValue","setInputValue","patientId","setPatientId","handleInputChange","event","target","value","handlePatientIdChange","handleSendMessage","trim","userMessage","response","fetch","method","headers","body","JSON","stringify","model","role","content","temperature","max_tokens","stream","data","json","choices","length","aiMessage","message","prevMessages","error","console","className","children","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","_c","$RefreshReg$"],"sources":["C:/Users/noahb/Coding/FHIR/simple-chat-app/src/Chat.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Chat.css'; // Optional: for styling\r\n\r\nconst Chat = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [patientId, setPatientId] = useState('');\r\n\r\n    const handleInputChange = (event) => {\r\n        setInputValue(event.target.value);\r\n    };\r\n\r\n    const handlePatientIdChange = (event) => {\r\n        setPatientId(event.target.value);\r\n    };\r\n\r\n    const handleSendMessage = async () => {\r\n        if (inputValue.trim()) {\r\n            const userMessage = inputValue;\r\n            setMessages([...messages, userMessage]);\r\n            setInputValue(''); // Clear the input field\r\n\r\n            // Send the user's message to the API\r\n            try {\r\n                // TODO: change to the actual API endpoint\r\n                const response = await fetch('http://localhost:1234/v1/chat/completions', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        model: \"llama-3.2-3b-instruct\",\r\n                        //TODO: change to actual instructions\r\n                        messages: [\r\n                            { role: \"system\", content: \"You are a large language model that is able to respond to the user's question. Your user's patient-id is {patient-id}.Your task is to do the following: 1. Provide the correct FHIR or API call as listed in the following instructions 2a. If the user is asking about a medication side effect, respond by creating an appropriate API call using the format: '!!API CALL: https://api.fda.gov/drug/label.json?search=openfda.brand_name:[medication_name]' 2b. If the user is asking about dosage, scheduling, and or administration instructions about a medication, respond by creating an appropriate API call using the format: '!!FHIR CALL: http://localhost:3000/fhir/MedicationRequest?patient=[patient-id]' 2c. If the user asks about why they are taking the medication, respond with creating an appropriate API call using the format: '!!FHIR CALL: http://localhost:3000/fhir/Condition?patient=[patient-id]' 3. If the user asks about topics that fulfill more than one criteria, respond by creating all of the appropriate API calls. 4. Do not respond with anything else aside from the API or FHIR call.\"},\r\n                            { role: \"user\", content: userMessage }\r\n                        ],\r\n                        temperature: 0.5,\r\n                        max_tokens: -1,\r\n                        stream: false\r\n                    }),\r\n                });\r\n\r\n                const data = await response.json();\r\n                // Assuming the response contains a message from the AI\r\n                if (data && data.choices && data.choices.length > 0) {\r\n                    const aiMessage = data.choices[0].message.content;\r\n                    setMessages((prevMessages) => [...prevMessages, aiMessage]);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error sending message:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"patient-id-prompt\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={patientId}\r\n                    onChange={handlePatientIdChange}\r\n                    placeholder=\"Enter patient ID...\"\r\n                />\r\n            </div>\r\n            <div className=\"messages\">\r\n                {messages.map((message, index) => (\r\n                    <div key={index} className=\"message\">\r\n                        {message}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInputChange}\r\n                    placeholder=\"Type your message here...\"\r\n                />\r\n                <button onClick={handleSendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}